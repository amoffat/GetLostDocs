{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Lost Docs","text":"<p>\ud83d\udc4b Welcome to the Get Lost platform dev documentation. This will serve as your reference for all things required to build levels for Get Lost.</p>"},{"location":"#just-want-to-play","title":"Just want to play?","text":"<p>Are you here by mistake and just want to play Get Lost?</p> <p>Play (Coming soon) </p>"},{"location":"#new-to-get-lost","title":"New to Get Lost?","text":"<p>If this is your first time here, please take a moment to learn about the vision.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>So you want to build a level? You'll probably first want to start with starting your development environment.</p>"},{"location":"#feedback","title":"Feedback","text":"<p>This documentation is constantly evolving. If you have any specific requests, please voice them on Discord.</p> <p>Join the Discord </p>"},{"location":"about/","title":"\u2139\ufe0f What is Get Lost?","text":"<p>Get Lost is an engine, a platform, and a web game. The goal is to make it easy for creators to tell stories within a larger game experience. Creators make self-contained levels and then publish those levels into the Get Lost Multiverse (1). Players can then play those levels on their journey through the game.</p> <ol> <li>The Get Lost Multiverse is the total collection of all levels in Get Lost. Levels in the Multiverse are connected so that an exit of one level attaches to the entry of another level. Learn more</li> </ol>"},{"location":"about/#the-vision","title":"\u2728 The vision","text":"<p>The vision of Get Lost is to connect creative people in a new way, using a collaborative game, to create a rich experience for players.</p>"},{"location":"about/#what-it-is","title":"\u2705 What it is","text":"<ul> <li>A premade framework for creating levels in a larger connected game</li> <li>A place for artists to tell stories and showcase their talents</li> <li>A place for artists to collaborate together to create a larger experience</li> <li>A dynamic story that grows and changes based on the contributions from individual levels</li> <li>An evolving multiverse with levels changing and appearing all the time</li> </ul>"},{"location":"about/#what-it-is-not","title":"\u274c What it is not","text":"<ul> <li>A game-making framework</li> <li>A static game with set levels</li> <li>A pre-defined story or narrative</li> <li>A collection of separate mini-games</li> <li>A crypto or NFT project</li> <li>A place for AI slop</li> </ul>"},{"location":"about/#the-pieces","title":"The pieces","text":""},{"location":"about/#the-engine","title":"\u2699\ufe0f The engine","text":"<p>The Get Lost engine provides all of the fundamental gameplay features like physics, sounds, controls, item inventory, tileset loading, etc... everything to make the level development and game experience run smoothly. As a creator, your interaction with the engine will be through the minimal code that you may choose to write for your level. For example, to play a sound, or to start a dialogue with an NPC. Other than that, the engine is mostly hidden from you.</p>"},{"location":"about/#the-platform","title":"\ud83e\udde9 The platform","text":"<p>The platform is what lets creators publish their level into the Get Lost Multiverse so that people on the internet can play it. Once a level has been published, it will be connected to the Get Lost game so that players can visit it as part of their journey. You, as a creator, can continue to tweak the content and evolve the level however you see fit, and your changes will be visible to the players in the game. As you think up new storylines, or create new items, you can add them to your level to enrich the player experience.</p>"},{"location":"about/#the-game","title":"\ud83c\udfae The game","text":"<p>The game is the player's cohesive experience through this multiverse of levels. Every level published by an artist is stitched into the multiverse by connecting it with other levels. And because all levels must have at least 1 entrypoint and at least 2 exits, there will always be more places to visit\u2014no dead ends.</p> <p>There is only one player avatar (1) that moves through levels, and players can make choices in levels that affect their traits. For example, if a player steals money from an NPC, the level may decrease their \"trustworthiness\" trait. Other levels can check this trait and give players different experiences.</p> <p>Items are another way for artists to collaborate across levels. Items that are picked up in one level can be used in other levels. For example, if a fire level gives a player a magic fire wand, and later they find themselves in an ice level, they might be able to melt a frozen door with it.</p> <ol> <li>One player avatar, but several possible variations. </li> </ol>"},{"location":"faq/","title":"\u2753 FAQ","text":""},{"location":"faq/#can-my-level-be-monetized","title":"Can my level be monetized?","text":"<p>Yes. Monetized levels get paid out through Stripe.</p>"},{"location":"faq/#will-there-be-multiplayer","title":"Will there be multiplayer?","text":"<p>No. Get Lost is a single player experience and is not a good fit for multiplayer.</p>"},{"location":"faq/#can-you-add-web3cryptonfts","title":"Can you add web3/crypto/NFTs?","text":"<p>No. There is no place for crypto in Get Lost.</p>"},{"location":"faq/#can-i-make-a-shooterplatformerpuzzleretc-in-get-lost","title":"Can I make a shooter/platformer/puzzler/etc in Get Lost?","text":"<p>The engine is flexible but opinionated. You can make levels with different mechanics, but the further you stray from telling stories, the more difficult it will be to make. The engine is really designed to tell stories, so if you go with that, you'll have the least amount of friction.</p>"},{"location":"faq/#can-i-make-a-level-with-ai","title":"Can I make a level with AI?","text":"<p>You can try, but I don't think you'll get very far. Making a level still requires you to have spatial and visual skills to lay out tiles and setup sensors. If you do manage to make a level with AI, there's a good chance it will be voted down by players due to it feeling inauthentic.</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#a","title":"A","text":"<p>Animation Frame A single image in a sequence that forms an animation. Frames are displayed in order to create the illusion of movement.</p> <p>Asset Any visual, audio, or data element used in a game, such as sprites, tiles, sound effects, or background music.</p>"},{"location":"glossary/#c","title":"C","text":"<p>Camera A virtual viewpoint that determines what portion of the game world is visible on the screen.</p> <p>Collision Detection The process of determining when two or more objects in a game intersect or come into contact.</p>"},{"location":"glossary/#e","title":"E","text":""},{"location":"glossary/#f","title":"F","text":""},{"location":"glossary/#g","title":"G","text":"<p>Game Loop A continuous cycle that updates the game state and renders graphics, ensuring the game runs consistently and responds to input.</p>"},{"location":"glossary/#l","title":"L","text":"<p>Layering The process of stacking visual elements on top of each other, often used to create depth and organize sprites (e.g., background, character, foreground).</p>"},{"location":"glossary/#p","title":"P","text":"<p>Parallax Scrolling A visual effect where background layers move at different speeds to create a sense of depth and perspective.</p>"},{"location":"glossary/#s","title":"S","text":"<p>Sprite A 2D bitmap image or animation that represents a character, object, or visual effect in a game.</p> <p>Sprite Sheet A single image containing multiple sprites, used to optimize rendering and simplify animation.</p>"},{"location":"glossary/#t","title":"T","text":"<p>Tile A small, reusable image used to create larger game environments. Tiles are placed on a grid to form levels or backgrounds.</p> <p>Tilemap A data structure representing a grid of tiles, used to define a game's environment.</p> <p>Tileset An image of individual tiles, used as a palette when building a level's map. You can buy tileset assets online or make them yourself.</p>"},{"location":"glossary/#v","title":"V","text":"<p>Viewport The visible portion of the game world displayed on the screen.</p>"},{"location":"glossary/#z","title":"Z","text":"<p>Z-Index A value that determines the draw order of objects. Higher values are drawn on top of lower values, creating depth.</p>"},{"location":"monetization/","title":"\ud83d\udcb0 Monetization","text":"<p>A core principle of the Get Lost platform is that artists should be financially supported for their work. To that end, levels can be monetized to receive revenue sharing.</p> <p>TODO</p>"},{"location":"art-assets/music/","title":"\ud83c\udfb6 Music","text":"<ul> <li>Abstraction sketchbook</li> <li>Freesound CC-0 music</li> </ul>"},{"location":"art-assets/sound-effects/","title":"\ud83d\udd0a Sound Effects","text":"<ul> <li>Free CC-0 sounds</li> </ul>"},{"location":"art-assets/tilesets/","title":"\ud83d\udd37 Tilesets","text":"<p>A tileset is the bread and butter of a Get Lost level. You create a tilemap by placing individual tile sprites that you sample from within a tileset.</p> <p>Itch.io remains the current king for finding affordable and quality tilesets. Use this link to browse some of the most popular ones. But, as with any online collection of assets, you can find real gems if you hunt.</p> <p>Below are some tilesets I have personally purchased and can vouch for. I've listed the full price, but many assets are on sale at different times. Also, many of these assets have limited free versions.</p> <p>Tip</p> <p>Do you have an resource that you want listed here? Make a request in the discord server.</p>"},{"location":"art-assets/tilesets/#interiors","title":"Interiors","text":""},{"location":"art-assets/tilesets/#dungeon","title":"Dungeon","text":"<ul> <li>Fire dungeon - $10</li> <li>Water dungeon - $10</li> </ul>"},{"location":"art-assets/tilesets/#misc","title":"Misc","text":"<ul> <li>Rogue Adventure - $7.99</li> <li>Modern Interiors - $5</li> <li>The Interiors - $10</li> </ul>"},{"location":"art-assets/tilesets/#exteriors","title":"Exteriors","text":""},{"location":"art-assets/tilesets/#desert","title":"Desert","text":"<ul> <li>RPG Desert Pack - $7.50</li> </ul>"},{"location":"art-assets/tilesets/#village","title":"Village","text":"<ul> <li>Harvest Summer - $6</li> </ul>"},{"location":"art-assets/tilesets/#city","title":"City","text":"<ul> <li>Modern Exteriors - $5</li> </ul>"},{"location":"art-assets/tilesets/#farm","title":"Farm","text":"<ul> <li>Tiny Wonder Farm - $5.99</li> </ul>"},{"location":"art-assets/tilesets/#market","title":"Market","text":"<ul> <li>Marketplace - $7.99</li> </ul>"},{"location":"art-assets/tilesets/#swamp","title":"Swamp","text":"<ul> <li>Tiny Wonder Swamp - $4.99</li> </ul>"},{"location":"art-assets/tilesets/#forest","title":"Forest","text":"<ul> <li>Spring Forest - $10</li> <li>Pixel Plains - $6</li> </ul>"},{"location":"reference/multiverse/","title":"\ud83c\udf0c The Multiverse","text":"<p>TODO</p>"},{"location":"reference/special-layers/","title":"\ud83e\uddc5 Special layers","text":"<p>In the Tiled map editor, Get Lost uses special layer names that can have different effects in the engine. For example, if you create a layer named <code>zooms</code>, any primitive object (1) will designate a zoom area. When the player walks through this zoom area, the camera will zoom in or out, based on the properties you've assigned to the primitive object.</p> <ol> <li>A primitive object is a rectangle or ellipse. Arbitrary polygon objects are not yet supported.</li> </ol>"},{"location":"reference/special-layers/#special-layers_1","title":"Special layers","text":""},{"location":"reference/special-layers/#bounds","title":"<code>bounds</code>","text":"<p>The <code>bounds</code> object layer can only contain one object and it must be a rectangle. This rectangle defines an artificial bounds for the camera that the camera will not leave as the player moves.</p> <p>Note</p> <p>Even though the camera will stay inside of the bounds, the player won't. The player can move anywhere where there isn't a collision object.</p> <p>If you don't define a bounds layer, the bounds of the map's tiles will be used instead. So this is useful if you want a camera bounds that is different than that.</p>"},{"location":"reference/special-layers/#collisions","title":"collisions","text":"<p>The <code>collisions</code> layer defines large scale collision objects. You can use any primitive object (including the polygon object) to define a collision object. The objects in this layer will mark an areas that the player or NPC cannot move through. This is useful to block off entire sections of the map, for example, at the map's boundaries, or the edges of bridges.</p>"},{"location":"reference/special-layers/#divider","title":"divider","text":"<p>The <code>divider</code> layer is a somewhat advanced layer. The layer contains should contain no objects. It's purpose is to separate the z-indices of any layers below above the divider from any layers below the divider. This is useful if you have a layer that the player will never walk on, for example, a bridge above the player. Most of the time, you will not need this layer, but when you need it, you'll know.</p>"},{"location":"reference/special-layers/#player","title":"player","text":"<p>The <code>player</code> layer sets the position (x, y) and the base z-index of the player's avatar. It should contain a single rectangle named <code>entry</code>. When your level loads in Get Lost, the player will be placed at the center of this rectangle. Move the rectangle around to where you want the player to start.</p> <p>Everything below the <code>player</code> layer will be permanently below the player on the z-index. This means that the player layer should always sit above the ground layer, because the player will never move underneath the ground. However, everything above the <code>player</code> layer will be evaluated for z-index sorting.</p>"},{"location":"reference/special-layers/#sensors","title":"sensors","text":"<p>The <code>sensors</code> layer defines objects that trigger a sensor call in your level's code.</p>"},{"location":"reference/special-layers/#sounds","title":"sounds","text":""},{"location":"reference/special-layers/#zooms","title":"zooms","text":""},{"location":"reference/special-layers/#layer-groups","title":"Layer groups","text":"<p>Layer groups are useful to logically group together layers based on their contents. They have no functional effect on the Get Lost engine, meaning they won't influence the behavior of the game. It's only for your own personal organization. The only thing they do effect in the engine is the authoritative naming of the layers. When Get Lost loads your Tiled map, it uses the layer names as they're given. Except if the layer is in a group. Then it is prefixed with the group name. For example, a layer named \"trees1\" in the \"trees\" layer group becomes \"trees/trees1\".</p>"},{"location":"reference/starting-dev-env/","title":"\ud83d\udcbb Starting development","text":"<p>Get Lost gives you a level template that you can (and should) use to start building levels quickly. It comes with a premade demo map, some sample level code, and public domain assets.</p> <p>There are 3 ways to use the level template, from beginner to advanced:</p> <ul> <li>Using Github Codespaces</li> <li>Running it locally in a VSCode devcontainer</li> <li>Running it locally outside of a devcontainer</li> </ul>"},{"location":"reference/starting-dev-env/#using-github-codespaces","title":"Using Github Codespaces","text":"<p>Difficulty: easy</p> <p>This is the recommeded way for beginners to use the Get Lost level template. You don't need anything installed on your computer... just a web browser and a Github account. Github Codespaces is a way to launch VSCode (and other programs) in the browser, so you can do all of your work in the browser without installing anything locally.</p> <p>To get started, open the level template repo and follow the instructions in the README.</p>"},{"location":"reference/starting-dev-env/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"reference/starting-dev-env/#the-codespace-takes-forever-to-boot","title":"The codespace takes forever to boot.","text":"<p>If you're not in US-East or US-West, this issue is likely caused by the prebuild cache not being available in your region. The codespace prebuild cache is something that I have to turn on manually per-region, and it accelerates the startup time, at a small cost to me. If you wait long enough, the codespace will boot. However, you can request your region be enabled in our Discord.</p>"},{"location":"reference/starting-dev-env/#local-devcontainer","title":"Local Devcontainer","text":"<p>Difficulty: medium</p> <p>First create a new repo from the level template. Then clone the repo locally as normal.(1)</p> <ol> <li>We assume you know how to do this!</li> </ol> <p></p> <p>Open your locally-cloned repo in VSCode. You should get a popup in the bottom right as VSCode detects that the repo has a devcontainer. When you see it, click <code>Reopen in Container</code>:</p> <p></p> <p>Now navigate to the <code>Ports</code> tab in VSCode and you should see two open ports. One is for playtesting your level (Level Preview) and the other is for using the map editor (Tiled):</p> <p></p>"},{"location":"reference/starting-dev-env/#troubleshooting_1","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"reference/starting-dev-env/#my-level-preview-wont-open","title":"My level preview won't open","text":"<p>If you click the <code>Open in browser</code> button on the <code>Level Preview</code> port and your browser hangs, check that it is opening as <code>https://</code> and not <code>http://</code>.</p>"},{"location":"reference/starting-dev-env/#bare-metal-installation","title":"Bare-metal installation","text":"<p>Difficulty: medium</p> <p>This is the most advanced installation process because you need to manage the dependencies yourself. There aren't really too many advantages of this method over the local devcontainer.</p> <p>TODO</p>"},{"location":"reference/upgrading/","title":"\u23eb\ufe0f Upgrading","text":"<p>Upgrading your level is a key part of level development. It's how you stay up to date with the latest changes and features.</p> <p>Do you just want to run the upgrade? Go here.</p>"},{"location":"reference/upgrading/#how-engine-versioning-works","title":"How engine versioning works","text":"<p>When you create a level from the level template, your level is \"soft pinned\" (1) to a particular version of the engine. You can find this pinned version by looking in the <code>/engine_version.txt</code> file of your repo. This engine version is used by the development environment to know which engine code your level needs to work.</p> <ol> <li>In software development, version pinning is telling the software to only use a specific version of some dependency. This makes the software predictable and less prone to breaking because it will never accidentally use a different version.</li> </ol> <p>Pinning your level to a specific version of the engine means you don't have to worry about changes to the platform breaking your level. You can build it once and forget it, and Get Lost will continue to add features, change things, and it shouldn't impact the playability of your level at all.</p> <p>Bug</p> <p>Versioning systems are tricky to operate and sometimes bug patches might need to be backported to older versions, which can affect the playability of those levels, even if version pinning is implemented.</p>"},{"location":"reference/upgrading/#serving-the-correct-version","title":"Serving the correct version","text":"<p>On the backend, the Get Lost platform controls what version of the engine it will actually serve for a given requested version. For example, if <code>/engine_version.txt</code> contains <code>1.2.3</code>, the platform might actually serve the engine at version <code>1.4.0</code>, if that is determined to be the best version.</p> <p>Get Lost uses the semantic versioning scheme to determine how versions are compatible with one another, but generally speaking, all major versions are forward compatible. This means that <code>1.2.7</code>, <code>1.4.0</code>, <code>1.9.3</code> are all compatible upgrades from <code>1.2.3</code> because the major version is the same. However, <code>2.1.0</code> isn't, because the major version changed.</p>"},{"location":"reference/upgrading/#running-the-upgrade","title":"Running the upgrade","text":"<p>Upgrading your level involves running an upgrade script that already lives in your level's repo. This script will automatically copy the <code>/level</code> directory to a safe place, then sync the rest of the code with the latest level template, then put the <code>/level</code> directory back. Finally, it will commit the changes.</p> <p>There are 2 ways to run this upgrade script:</p>"},{"location":"reference/upgrading/#from-vscode","title":"From VSCode","text":"<p>Whether you're developing in a hosted development environment on Github Codespaces, in a local devcontainer, or on the bare metal, as long as you're running VSCode, you should be able to do the following:</p> <p>Press Ctrl+Shift+B to open the command palette for build tasks. Then select <code>Upgrade Level</code>.</p> <p></p> <p>Once the script completes, you're done!</p>"},{"location":"reference/upgrading/#from-the-commandline","title":"From the commandline","text":"<p>You can achieve the same result as above by running the upgrade script from the commandline. Open a terminal and navigate to your level's repo. Then run:</p> <pre><code>python3 scripts/upgrade.py\n</code></pre> <p>Once the script completes, you're done!</p>"},{"location":"reference/upgrading/#troubleshooting","title":"Troubleshooting","text":"<p>Tip</p> <p>If nothing else works, you can always re-create your level repo and save all of the work in your <code>/level</code> folder:</p> <ol> <li>Copy out your <code>/level</code> folder.</li> <li>Re-create your level repo manually.</li> <li>Copy <code>/level</code> with your copied level folder.</li> </ol>"},{"location":"reference/upgrading/#my-devcontainer-is-acting-strange","title":"My devcontainer is acting strange","text":"<p>Sometimes the upgrade script will replace files in <code>/.devcontainer/</code> which are used by your development environment. VSCode will usually detect these changes ask if you want to rebuild the container. You'll want to do this, so that your devcontainer is running as intended.</p> <p>Open the command palette with Ctrl+Shift+P, then type <code>Rebuild container</code> and select <code>Dev Containers: Rebuild Container</code></p> <p></p> <p>The devcontainer will rebuild, and everything should be in a pristine state.</p>"},{"location":"reference/upgrading/#i-lost-my-assemblyscript-code-changes","title":"I lost my Assemblyscript code changes","text":""},{"location":"reference/dialogue/sugarcube/","title":"\u2b1c SugarCube","text":"<p>For dialogue written with Twine, Get Lost supports a very limited subset of the <code>SugarCube</code> story format.(1)</p> <ol> <li>A story format is what Twine calls a text templating language. There are several story formats that it supports, but Get Lost only supports SugarCube.</li> </ol> <p>Note</p> <p>The subset of supported functionality is always expanding. If you want request something specific, make a request in the Discord.</p>"},{"location":"reference/dialogue/sugarcube/#flow-control","title":"\ud83d\udd00 Flow control","text":"<p>We support basic if/elseif/else flow control.</p> <pre><code>&lt;&lt;if visited() &gt; 1&gt;&gt;\n    Welcome back\n&lt;&lt;else if visited() &gt; 2&gt;&gt;\n    You again??\n&lt;&lt;else&gt;&gt;\n    Hello\n&lt;&lt;/if&gt;&gt;\n</code></pre> <p>Flow control can also be nested for complex branching.</p>"},{"location":"reference/dialogue/sugarcube/#variables","title":"\ud83d\udd21 Variables","text":"<p>A variable can be set in any passage, like this:</p> <p><code>&lt;&lt;set $answer to 42&gt;&gt;</code></p> <p>This sets the variable named <code>$answer</code> to the number <code>42</code>. You can then access that variable in another passage, for example:</p> <pre><code>&lt;&lt;if $answer == 42&gt;&gt;\n    The answer is 42.\n&lt;&lt;/if&gt;&gt;\n</code></pre> <p>The way this is typically used is to have some dialogue tree that eventually sets a variable if you make the right choices. Then you can access that variable in your level code or in later dialogue to advance the story.</p>"},{"location":"reference/dialogue/sugarcube/#level-access","title":"Level access","text":"<p>Your level code can access variables by using the <code>dialogue</code> namespace. On <code>dialogue</code> exists a <code>state</code> attribute, and on that object exists all of the variable names that you've set.</p> <p>Example</p> <p>Suppose your level has a secure door that requires a password. You talk to an employee while they're on their break and you're able to finesse the password from them. The passage where the employee reveals the password would also have this:</p> <pre><code>&lt;&lt;set $gotPassword to true&gt;&gt;\n</code></pre> <p>Then, in your level code, when you interact with the door, you can check to see if you got the password before deciding to let the player in or not:</p> <pre><code>if (dialogue.state.gotPassword) {\n    // open the door\n} else {\n    // deny access\n}\n</code></pre>"},{"location":"reference/dialogue/sugarcube/#initial-value","title":"Initial value","text":"<p>For variables that you want to apply story-wide, you want to set an initial value to your variable. This is what the special <code>StoryInit</code> passage is for. Set initial values there and every passage will see that initial value.</p> <pre><code>&lt;&lt;set $gotPassword to false&gt;&gt;\n</code></pre>"},{"location":"reference/dialogue/sugarcube/#builtin-functions","title":"\ud83e\uddf0 Builtin functions","text":"<p>These functions are defined in <code>assemblyscript/@gl/utils/twine.ts</code>. You can use them freely throughout your dialogue as either as an expression or as a function call.</p>"},{"location":"reference/dialogue/sugarcube/#visited","title":"<code>visited()</code>","text":"<p>Returns the number of times that the player has visited a passage. If no arguments are passed, it assumes the current passage.</p> <pre><code>&lt;&lt;if visited() &gt; 3&gt;&gt;\n    How many times do I have to tell you?\n&lt;&lt;/if&gt;&gt;\n</code></pre> <p>Warning</p> <p>It is counter-intuitive, but <code>visited()</code> will always return 1, not 0, the first time you visit the passage.</p>"},{"location":"reference/dialogue/sugarcube/#hasvisited","title":"<code>hasVisited()</code>","text":"<p>Returns a boolean if the player has visited a passage. If no arguments are passed, it assumes the current passage.</p>"},{"location":"reference/dialogue/sugarcube/#isnight","title":"<code>isNight()</code>","text":"<p>Returns a boolean of whether or not the player's current time of day is night.</p>"},{"location":"reference/dialogue/sugarcube/#isday","title":"<code>isDay()</code>","text":"<p>Returns a boolean of whether or not the player's current time of day is day.</p>"},{"location":"reference/dialogue/sugarcube/#haspickuptags","title":"<code>hasPickup(tags)</code>","text":"<p>Returns true if the player possesses a pickup that matches the provided tags, false otherwise. Use this to change the dialogue based on a particular item, for example:</p> <pre><code>&lt;&lt;if hasPickup({type: \"map\"})&gt;&gt;\n    You have the map! Let me see it!\n    [[Ok, here.]]\n    [[What do you want with it?]]\n&lt;&lt;else&gt;&gt;\n    Let me know when you find the map.\n&lt;&lt;/if&gt;&gt;\n</code></pre>"},{"location":"reference/dialogue/sugarcube/#randommin-max","title":"<code>random(min, max)</code>","text":"<p>Returns a random integer between min and max, inclusive.</p>"},{"location":"reference/dialogue/sugarcube/#randomfloatmin-max","title":"<code>randomFloat(min, max)</code>","text":"<p>Returns a random float between min and max, inclusive.</p>"},{"location":"reference/dialogue/sugarcube/#exitexitname-forcefalse","title":"<code>exit(exitName, force=false)</code>","text":"<p>Exits the map, using the exit <code>exitName</code>. If <code>force</code> is false, the player will be given the option to exit. If <code>force</code> is true, they will not.</p>"},{"location":"reference/dialogue/sugarcube/#level-functions","title":"\ud83c\udf92 Level functions","text":"<p>Your SugarCube code can also call functions defined in your level's <code>main.ts</code> file. To call these functions, just prefix your call with <code>level</code>. For example:</p> <pre><code>&lt;&lt;if level.isCorrect($answer)&gt;&gt;\n    You guessed correctly.\n&lt;&lt;/if&gt;&gt;\n</code></pre> <p>And in your <code>main.ts</code> file, define <code>isCorrect</code>:</p> <pre><code>export function isCorrect(num: i32): bool {\n  return num === 42;\n}\n</code></pre>"},{"location":"reference/dialogue/sugarcube/#widgets","title":"Widgets","text":"<p>Warning</p> <p>Widgets are an advanced topic, and might have some rough edges.</p> <p>Widgets let you define some passage markup that you can re-use as often as you want. It's useful for things like player choices that you want to appear in multiple passages and stay in sync.</p> <p>TODO finish this.</p>"},{"location":"tutorials/dialogue/creating-dialogue/","title":"\ud83d\udcac Creating dialogue","text":"<p>Dialogue is an important aspect of your Get Lost level. Through dialogue, you can reveal parts of your story that are difficult to tell visually. Get Lost dialogue can be dynamic, changing with time of day, items that the player has, or choices that they've made.</p> <p>Info</p> <p>Looking for the SugarCube reference? Go here.</p> <p>We use Twine to create dialogue, and it comes builtin to the Get Lost development environment. This means you don't need to install anything.</p> <p>In this tutorial, we'll add dialogue for a new NPC named Omar.</p>"},{"location":"tutorials/dialogue/creating-dialogue/#fire-up-twine","title":"\ud83d\ude80 Fire up Twine","text":"<p>Go to your <code>Ports</code> tab in VSCode and open the <code>Twine - Dialogue</code> port in the browser. This will launch the Twine software.</p> <p></p> <p>Once your browser tab opens, you should see the Twine interface. You'll see an existing story named \"Level\", like the following:</p> <p></p> <p>Double click on the story to open it for editing.</p>"},{"location":"tutorials/dialogue/creating-dialogue/#add-a-new-passage","title":"\ud83c\udd95 Add a new passage","text":"<p>Since our Omar NPC will be totally new, there are no existing passages(1) to attach to, so we need to create some new nodes. Start by finding the <code>Start</code> passage(2) and double clicking it to open it.</p> <ol> <li>A passage is what Twine calls a dialogue node in the story.</li> <li>The start passage has a little green spaceship attached to it. \ud83d\ude80</li> </ol> <p></p> <p>Now add a link for Omar by adding the following line: <code>[[Talk to Omar|Omar]]</code>. Once you've done that, a new passage automatically appears in the workspace:</p> <p></p>"},{"location":"tutorials/dialogue/creating-dialogue/#add-new-dialogue","title":"\ud83d\uddea Add new dialogue","text":"<p>The new Omar passage has no content, which is why it has a dashed border. Double click it so we can add some content. The content that we'll add will be what Omar says when we interact with him. Write anything you want.</p> <p></p> <p>We also want all conversations with Omar have the title \"Omar\" at the top(1). We can do this by putting a tag on this passage. Click the \"+ Tag\" button, then select \"New Tag\", set \"Tag name\" to \"Omar\" and optionally set a color. Then click \"+ Add\".</p> <p></p> <p>This will make it so that the all interactions with Omar have the title \"Omar\" when you're playing the game.</p> <p>Note</p> <p>You only need to set a tag on the very first passage for the NPC. This tag will be automatically inherited by all of the passages underneath it.</p>"},{"location":"tutorials/dialogue/creating-dialogue/#add-dialogue-choices","title":"\ud83e\udd14 Add dialogue choices","text":"<p>Now that we have a text interaction with Omar, let's add some choices. Add the following lines to your passage:</p> <pre><code>[[What is this place?]]\n[[How did I get here?]]\n</code></pre> <p>When you add this text to your passage, Twine will automatically create 2 new connected passages.</p> <p></p> <p>Now repeat the process with the new passages\u2014write new dialogue, then create new responses with links.</p>"},{"location":"tutorials/dialogue/creating-dialogue/#add-logic","title":"\ud83e\udde9 Add logic","text":"<p>Twine nodes support a basic programming language(1). It's not as powerful as a real programming language, like Javascript or Python, but most of the time it's enough to do what you want. It's called <code>SugarCube.</code></p> <ol> <li>We call it a programming language, but Twine calls it a \"story format.\" Twine has several story formats, and they're all effectively different languages, but SugarCube is the only one we support.</li> </ol> <p>Let's add some logic that will display a different message if the user has talked with Omar already. Change your Omar dialogue to have the following contents:</p> <pre><code>&lt;&lt;if visited() &gt; 1&gt;&gt;\n  Welcome back.\n&lt;&lt;else&gt;&gt;\n  What up, I'm Omar.\n&lt;&lt;/if&gt;&gt;\n\n[[What is this place?]]\n[[How did I get here?]]\n</code></pre> <p>Now, if it's the first time the player has interacted with Omar, they'll be presented with:</p> <pre><code>What up, I'm Omar.\n\n[[What is this place?]]\n[[How did I get here?]]\n</code></pre> <p>And every time afterwards, they'll be presented with:</p> <pre><code>Welcome back.\n\n[[What is this place?]]\n[[How did I get here?]]\n</code></pre> <p>Info</p> <p>You're not just limited to putting text within <code>&lt;&lt;if&gt;&gt;</code> and <code>&lt;&lt;else&gt;&gt;</code>; you can put links as well.</p> <p>SugarCube is a powerful markup language. You can set variables, call functions, and trigger events. For the full reference of what Get Lost supports, go here.</p>"},{"location":"tutorials/dialogue/creating-dialogue/#trigger-your-dialogue","title":"\u2705 Trigger your dialogue","text":"<p>Now that we have a basic interaction, we need to tell your level code how to fire off that interaction. There are two ways to do this.</p> <ol> <li>Force the dialogue when the player touches a sensor.</li> <li>Show an \"Interact\" button when the player touches a sensor, then show the dialogue when they press that button.</li> </ol>"},{"location":"tutorials/dialogue/creating-dialogue/#forcing-the-dialogue","title":"\ud83d\udc40 Forcing the dialogue","text":"<p>This option is good for mandatory dialogue that the player must see. To do this, open <code>level/code/main.ts</code> and find the <code>sensorEvent</code> handler. It should look something like this:</p> <pre><code>export function sensorEvent(\n  initiator: string,\n  sensorName: string,\n  entered: bool\n): void {\n  if (initiator !== \"player\") {\n    return;\n  }\n  if (sensorName === \"flame\") {\n    dialogue.stage_Fire(entered);\n  } else if (sensorName === \"knight\") {\n    dialogue.stage_Knight(entered);\n  } else if (sensorName === \"well\") {\n    dialogue.stage_Well(entered);\n  } else if (sensorName === \"nazar\") {\n    dialogue.stage_Nazar(entered);\n  } else if (sensorName === \"water\") {\n    inWater = entered;\n  }\n  // ...\n}\n</code></pre> <p>We add a new <code>else if</code> section for a new sensor:</p> <pre><code>else if (sensorName === \"omar\") {\n    dialogue.passage_Omar();\n}\n</code></pre> <p>This will make it so that when the player enters the sensor(1) named <code>omar</code>, your dialogue for Omar will be displayed. However, the player won't have a choice in seeing the dialogue, so if that's what you want, read on.</p> <ol> <li>You'll still need to set up the sensor in the Tiled map editor, either by creating a new sensor object, or by adding an NPC and naming it <code>omar</code>.</li> </ol>"},{"location":"tutorials/dialogue/creating-dialogue/#staging-the-dialogue","title":"\ud83d\udc49 Staging the dialogue","text":"<p>Use this option if you want to give the player freedom about when the dialogue is displayed. The code looks basically the same as forcing dialogue, except we use <code>dialogue.stage_Omar(entered)</code> instead of <code>dialogue.passage_Omar()</code>. What this does is it gives the player an <code>Interact</code> button when they enter the sensor. When they click the button, the <code>buttonPressEvent</code> fires, and <code>dialogue.dispatch(passageId)</code> is called to show your Omar passage.</p> <p></p>"},{"location":"tutorials/dialogue/creating-dialogue/#play-your-changes","title":"\ud83d\udd79\ufe0f Play your changes","text":"<p>Each time you make a change in Twine, it autosaves and reloads the level preview. The typical workflow involves going back and forth between the level preview tab and the twine tab, making changes, then trying those changes.</p> <p>Info</p> <p>Unfortunately, each time the level preview reloads, the whole level is reset, so you have to play through your dialogue from the beginning.</p>"},{"location":"tutorials/dialogue/creating-dialogue/#debug-your-dialogue","title":"\ud83d\udee0\ufe0f Debug your dialogue","text":"<p>Get Lost automatically transpiles(1) your Twine dialogue into an Assemblyscript file that lives in <code>level/code/generated/dialogue.ts</code>. Feel free to look at the generated code to see what it's doing.</p> <ol> <li>Transpiling is converting from one source code to another. In this case, we're converting from a Twine <code>.twee</code> file to AssemblyScript.</li> </ol> <p>Warning</p> <p>Any changes that you make to the generated dialogue file will be overwritten when the file is regenerated. It is not designed to be edited.</p>"},{"location":"tutorials/interaction/creating-sensors/","title":"\ud83d\udce1 Creating Sensors","text":"<p>Sensors are a key facilitator of interactions in a Get Lost level. When the player enters or exits a sensor, you can do things like trigger sounds, text dialogs, exit the level, or adjust some hidden state\u2014whatever you can think of.</p>"},{"location":"tutorials/interaction/creating-sensors/#defining-the-sensor","title":"Defining the sensor","text":"<p>In the Tiled app, make sure you have an Object Layer called <code>sensors</code>. This layer must contain only Tiled shapes (like rectangle or ellipse).</p> <p>TODO</p>"},{"location":"tutorials/map/resetting/","title":"\ud83d\udd04 Resetting the map","text":"<p>If you don't like the default map from the level template, you can reset it.</p> <p>With your project open in Tiled, create a new map.</p> <p></p> <p>Now pick the following settings for your map:</p> <p>Feel free to change the tile size if you know what tiles you want to use.</p> <p></p> <p>Once the new map opens, save it, and save over the old <code>level.tmj</code>.</p>"},{"location":"tutorials/physics/making-collisions/","title":"\ud83c\udf32 Planting a tree","text":"<p>In this tutorial, we will create a tree that the player can move in front of, behind, and run into. This will demonstrate the physics engine collisions as well as some basic z-sorting concepts.</p> <p>Open up the map you created in the starting development tutorial. We'll use this map and the Pixel Plains assets to plant the tree.</p> <p>In the Tiled app, create a special object layer titled <code>collisions</code>. This layer will hold all of the primitive objects to define</p>"},{"location":"tutorials/sound/area-sound/","title":"\ud83d\udc42 Making an area sound","text":"<p>TODO</p>"},{"location":"tutorials/sound/playing-sound/","title":"\u25b6\ufe0f Playing a sound","text":"<p>TODO</p>"},{"location":"tutorials/sound/walk-sound/","title":"\ud83c\udfc3 Making a walk sound","text":"<p>TODO</p>"}]}